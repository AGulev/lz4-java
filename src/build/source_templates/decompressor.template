// Auto-generated: DO NOT EDIT

package net.jpountz.lz4;

import static net.jpountz.lz4.LZ4Constants.*;
@if{ type == "Unsafe" }
import static net.jpountz.lz4.LZ4UnsafeUtils.*;
import static net.jpountz.util.UnsafeUtils.*;
import static net.jpountz.util.Utils.checkRange;
@else{}
import static net.jpountz.lz4.LZ4Utils.*;
import static net.jpountz.util.Utils.*;
@end{}

/**
 * Decompressor.
 */
final class LZ4Java@{type}${size}Decompressor extends LZ4${size}Decompressor {

  public static final LZ4${size}Decompressor INSTANCE = new LZ4Java${type}${size}Decompressor();

  @Override
  public int decompress(byte[] src, final int srcOff@if{ size != "" }, final int srcLen @end{}, byte[] dest, final int destOff, int destLen) {
@if{ size != "" }
    checkRange(src, srcOff, srcLen);
    checkRange(dest, destOff, destLen);

    final int srcEnd = srcOff + srcLen;
@else{}
    checkRange(src, srcOff);
    checkRange(dest, destOff, destLen);

    if (destLen == 0) {
      if (src[srcOff] != 0) {
        throw new LZ4Exception("Malformed input at " + srcOff);
      }
      return 1;
    }
@end{}

    final int destEnd = destOff + destLen;

    int sOff = srcOff;
    int dOff = destOff;

@if{ size == "" }
    while (true) {
@else{}
    while (sOff < srcEnd) {
@end{}
      final int token = readByte(src, sOff) & 0xFF;
      ++sOff;

      // literals
      int literalLen = token >>> ML_BITS;
      if (literalLen == RUN_MASK) {
        byte len = (byte) 0xFF;
        while (@if{ size != "" }sOff < srcEnd &&@end{}(len = src[sOff++]) == (byte) 0xFF) {
          literalLen += 0xFF;
        }
        literalLen += len & 0xFF;
      }

      final int literalCopyEnd = dOff + literalLen;
@if{ size == "" }
      if (literalCopyEnd > destEnd - COPY_LENGTH) {
        if (literalCopyEnd != destEnd) {
          throw new LZ4Exception("Malformed input at " + sOff);
@else{}
      if (literalCopyEnd > destEnd - COPY_LENGTH || sOff + literalLen > srcEnd - COPY_LENGTH) {
        if (literalCopyEnd > destEnd) {
          throw new LZ4Exception();
        } else if (sOff + literalLen != srcEnd) {
          throw new LZ4Exception("Malformed input at " + sOff);
@end{}
        } else {
          safeArraycopy(src, sOff, dest, dOff, literalLen);
          sOff += literalLen;
          dOff = literalCopyEnd;
          break; // EOF
        }
      }

      wildArraycopy(src, sOff, dest, dOff, literalLen);
      sOff += literalLen;
      dOff = literalCopyEnd;

      // matchs
      final int matchDec = readShortLittleEndian(src, sOff);
      sOff += 2;
      int matchOff = dOff - matchDec;

      if (matchOff < destOff) {
        throw new LZ4Exception("Malformed input at " + sOff);
      }

      int matchLen = token & ML_MASK;
      if (matchLen == ML_MASK) {
        byte len = (byte) 0xFF;
        while (@if{ size != "" }sOff < srcEnd &&@end{}(len = src[sOff++]) == (byte) 0xFF) {
          matchLen += 0xFF;
        }
        matchLen += len & 0xFF;
      }
      matchLen += MIN_MATCH;

      final int matchCopyEnd = dOff + matchLen;

      if (matchCopyEnd > destEnd - COPY_LENGTH) {
        if (matchCopyEnd > destEnd) {
          throw new LZ4Exception("Malformed input at " + sOff);
        }
        safeIncrementalCopy(dest, matchOff, dOff, matchLen);
      } else {
        wildIncrementalCopy(dest, matchOff, dOff, matchCopyEnd);
      }
      dOff = matchCopyEnd;
    }

@if{ size == "" }
    return sOff - srcOff;
@else{}
    return dOff - destOff;
@end{}
  }

}

